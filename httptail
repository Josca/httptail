#!/bin/bash
set -e 

# function to print usage info
usage () {
    echo "Usage:"
    echo "    $0 [OPTIONS] [URL ...]"
    echo
    echo "Options:"
    echo "    -c|--config FILE      read defaults and options from FILE,"
    echo "                          defaults to \$HOME/.httptailrc"
    echo "    -p|--preset STRING    selects named preset from configuration file"
    echo "    -n|--count NUM        output last NUM bytes, defaults to 4096"
    echo "    -f|--follow           append data to the output as the file grows"
    echo "    -i|--interval NUM     check for updates every NUM seconds, defaults to 1,"
    echo "                          only makes sense with --follow"
    echo "    -s|--start NUM        output starts at byte NUM, defaults to 0,"
    echo "                          this option is mutually exclusive with --count"
    echo "    -e|--end NUM          output ends at byte NUM, defaults to end of file,"
    echo "                          this option is mutually exclusive with --count"
    echo "    -P|--prepend          prefix each line with file url"
    echo "    -x|--debug            debug mode"
    echo "    -h|--help             print help (this text)"
    echo
    echo "Examples:"
    echo "    Print last 10kb:"
    echo "        $0 -c 10240 'http://example.com/path/file.log'"
    echo "    Print everything from byte 1024 to 2048:"
    echo "        $0 -s 1024 -e 2048 'http://example.com/path/file.log'"
    echo "    Print what was appended to the file on the server every 0.5s:"
    echo "        $0 -f -i 0.5 'http://example.com/path/file.log'"
    exit "$1"
}

prepend () {
    "$@" | sed "s|^|${urls[$i]}: |";
}

password_prompt () {
  echo "Password required:" > /dev/stderr;
  read -r -s pwd;
  echo "$pwd"
}

set_conf () {
    local N="${preset}_$1"
    if [ "${!N}" ]; then
        if [ "$2" = "array" ]; then
            eval "$1"='("${'"$N"'[@]}")'
        else
            eval "$1=\"$$N\""
        fi
    fi
}

parse_args () {
    # parse command line
    urls=()
    while [ $# -gt 0 ]; do
    case "$1" in
    -f|--follow)   follow="1";     shift 1 ;;
    -i|--interval) interval="$2";  shift 2 ;;
    -s|--start)    start="$2";     shift 2 ;;
    -e|--end)      end="$2";       shift 2 ;;
    -n|--count)    count="$2";     shift 2 ;;
    -c|--config)   config="$2";    shift 2 ;;
    -p|--preset)   preset="${2}";  shift 2 ;;
    -P|--prepend)  prep="prepend"; shift 1 ;;
    -x|--debug)    set -x; dbg=-v; shift 1 ;;
    -h|--help)     usage 0 ;;
    *)             urls+=( "$1" ); shift 1 ;;
    esac
    done
}

configure () {
    interval=1

    if [ -e "$HOME/.httptailrc" ]; then
        config="$HOME/.httptailrc"
    else
        config="/etc/httptailrc"
    fi

    parse_args "$@"

    #TODO: allow start && follow
    if [[ "$count" && "$start" ]] || [[ "$count" && "$end" ]] || [[ "$start" && "$follow" ]] || [[ "$end" && "$follow" ]]; then
        echo "Wrong combination of parameters!" >> /dev/stderr
        usage 3;
    fi

    # read configuration file
    # shellcheck source=httptailrc
    . "$config"

    #set additional konfiguration based on preset passed on commandline
    for opt in PROXY OPTS INTERVAL COUNT FILE; do
        set_conf "$opt"
    done
    set_conf "SERVERS" "array"

    # construct array with all the urls
    #TODO: make this work when only one of FILE and SERVERS is defined
    if [[ -n "$FILE" && -n "$SERVERS" ]]; then
        urls=()
        for s in "${SERVERS[@]}"; do urls+=( "$s/$FILE" ); done
    fi

    # set proxy
    if [ "$PROXY" ];then
        export http_proxy="$PROXY"
        export https_proxy="$PROXY"
    fi

    # set interval
    interval="${INTERVAL:-$interval}"
}

get_length() {
    curl "${dbg:---silent}" "${OPTS[@]}" --head "$1" | sed -n 's/\r//;s/Content-Length: //p;'
}

calculate_range () {
    if [ "$start" ]; then
        if [ "$end" ]; then
            len="$(get_length "$1")"
            range="$start-$(( len - end - 1 ))"
        else
            range="$start-"
        fi
    else
        if [ "$end" ]; then
            range="-$end"
        else
            range="-${count:-${COUNT:-4096}}"
        fi
    fi
    # check that the range has correct values
    echo "$range" | grep -q "[0-9]*-[0-9]*" || usage 4
}

main () {
    configure "$@"

    url_count=${#urls[@]}

    # get the data
    if [ "$follow" ]; then
        for (( i=0; i<url_count; i++ )); do
            lastlen[$i]="$(( "$(get_length "${urls[$i]}")" - ${count:-${COUNT:-4096}} ))"
            lastlen[$i]="$(( "${lastlen[$i]}" > 0 ? "${lastlen[$i]}" : 0 ))"
        done;
        while true; do
            for (( i=0; i<url_count; i++ )); do
                len="$(get_length "${urls[$i]}")"
                [ "${lastlen[$i]}" != "$len" ] && $prep curl "${dbg:---silent}" "${OPTS[@]}" --range "${lastlen[$i]}-" "${urls[$i]}"
                lastlen[$i]="$len"
            done
            sleep $interval
        done
    else
        for (( i=0; i<url_count; i++ )); do
            calculate_range "${urls[$i]}"
            $prep curl "${dbg:---silent}" "${OPTS[@]}" --range "$range" "${urls[$i]}"
        done
    fi

    # add a newline, to make it look better in terminal in case when downloaded
    # data do not end with newline
    echo
}

main "$@"
